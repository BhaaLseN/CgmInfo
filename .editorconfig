# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]
indent_style = space
# (Please don't specify an indent_size here; that has too many unintended consequences.)

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
insert_final_newline = true
trim_trailing_whitespace = true

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

# JSON files
[*.json]
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

# Dotnet code style settings:
[*.{cs,vb}]
# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_event = false : suggestion
dotnet_style_qualification_for_field = false : suggestion
dotnet_style_qualification_for_method = false : suggestion
dotnet_style_qualification_for_property = false : suggestion

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true : warning
dotnet_style_predefined_type_for_member_access = true : warning

# Suggest more modern language features when available
dotnet_prefer_inferred_tuple_names = true : suggestion
dotnet_prefer_inferred_anonymous_type_member_names = true : suggestion
dotnet_style_collection_initializer = true : suggestion
dotnet_style_coalesce_expression = true : suggestion
dotnet_style_explicit_tuple_names = true : suggestion
dotnet_style_null_propagation = true : suggestion
dotnet_style_object_initializer = true : suggestion

# modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members : warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async : warning

# CSharp code style settings:
[*.cs]
# Prefer "var" when obvious/useful
csharp_style_var_for_built_in_types = false : suggestion
csharp_style_var_when_type_is_apparent = true : suggestion
csharp_style_var_elsewhere = true : suggestion

# Prefer method-like constructs to have a block body (unless they fit on a single line)
csharp_style_expression_bodied_constructors = false : none
csharp_style_expression_bodied_methods = when_on_single_line : none
csharp_style_expression_bodied_operators = when_on_single_line : none

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_accessors = when_on_single_line : none
csharp_style_expression_bodied_indexers = when_on_single_line : none
csharp_style_expression_bodied_properties = when_on_single_line : none

# Suggest more modern language features when available
csharp_prefer_simple_default_expression = true : suggestion
csharp_style_conditional_delegate_call = true : warning
csharp_style_deconstructed_variable_declaration = true : suggestion
csharp_style_inlined_variable_declaration = true : suggestion
csharp_style_pattern_local_over_anonymous_function = true : suggestion
csharp_style_pattern_matching_over_as_with_null_check = true : suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true : suggestion
csharp_style_throw_expression = true : suggestion

# Spacing
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = ignore
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_parentheses = never
csharp_space_between_square_brackets = false

# Braces
csharp_prefer_braces = true

# Indentation
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_labels = flush_left
csharp_indent_switch_labels = true

# Wrapping
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false

# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# naming style conventions
# pascal case (SomeIdentifierHere)
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
# came case (SomeIdentifierHere)
dotnet_naming_style.camel_case_style.capitalization = camel_case
# camel case with underscore prefix (_someIdentifierHere)
dotnet_naming_style.underscore_camel_case_style.required_prefix = _
dotnet_naming_style.underscore_camel_case_style.capitalization = camel_case

# naming style targets
dotnet_naming_symbols.methods_properties_classes.applicable_kinds = method,property,class,struct,delegate,enum,interface,event
dotnet_naming_symbols.locals_parameters.applicable_kinds = parameter
dotnet_naming_symbols.constant_fields.applicable_kinds = field
dotnet_naming_symbols.constant_fields.required_modifiers = const
dotnet_naming_symbols.static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.static_readonly_fields.required_modifiers = static,readonly
dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private

# naming conventions
# name all methods, properties and classes using PascalCase
dotnet_naming_rule.methods_properties_classes_should_be_camel_case.severity = warning
dotnet_naming_rule.methods_properties_classes_should_be_camel_case.symbols = methods_properties_classes
dotnet_naming_rule.methods_properties_classes_should_be_camel_case.style = pascal_case_style

# name all constant or static/readonly fields using PascalCase
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style = pascal_case_style
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.symbols = static_readonly_fields
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.style = pascal_case_style

# name all private fields using _camelCase
dotnet_naming_rule.private_fields_should_be_underscore_camel_case.severity = warning
dotnet_naming_rule.private_fields_should_be_underscore_camel_case.symbols = private_fields
dotnet_naming_rule.private_fields_should_be_underscore_camel_case.style = underscore_camel_case_style

# name all locals and parameters fields using camelCase
dotnet_naming_rule.locals_parameters_should_be_underscore_camel_case.severity = warning
dotnet_naming_rule.locals_parameters_should_be_underscore_camel_case.symbols = locals_parameters
dotnet_naming_rule.locals_parameters_should_be_underscore_camel_case.style = camel_case_style
